// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli-story create cjs story 1`] = `
Object {
  "VariantButton.test.js": "const path = require('path');
const { run } = require('axe-core');
const { reactRunDOM } = require('@component-controls/test-renderers');
require('@component-controls/jest-axe-matcher');

const { loadConfigurations } = require('@component-controls/config');
const { renderExample } = require('@component-controls/test-renderers');
const { render, act } = require('@testing-library/react');
const { renderErr } = require('@component-controls/test-renderers');

const doc = require('./../../../../core/jest-extract/test/fixtures/story/VariantButton.docs');
const {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} = require('./../../../../core/jest-extract/test/fixtures/story/VariantButton.docs');

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);

  describe('overview', () => {
    const example = overview;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('primary', () => {
    const example = primary;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('accent', () => {
    const example = accent;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('disabled', () => {
    const example = disabled;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('success', () => {
    const example = success;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('error', () => {
    const example = error;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('warning', () => {
    const example = warning;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });
});
",
}
`;

exports[`cli-story create enzyme story 1`] = `
Object {
  "VariantButton.test.ts": "import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderExample } from '@component-controls/test-renderers';
import { mount, configure } from 'enzyme';
import toJson from 'enzyme-to-json';
import Adapter from '@wojtekmaj/enzyme-adapter-react-17';

configure({ adapter: new Adapter() });

import doc, {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);

  describe('overview', () => {
    const example = overview;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('primary', () => {
    const example = primary;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('accent', () => {
    const example = accent;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('disabled', () => {
    const example = disabled;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('success', () => {
    const example = success;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('error', () => {
    const example = error;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('warning', () => {
    const example = warning;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });
});
",
}
`;

exports[`cli-story create esm story 1`] = `
Object {
  "VariantButton.test.js": "import * as path from 'path';
import { run } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderExample } from '@component-controls/test-renderers';
import { render, act } from '@testing-library/react';
import { renderErr } from '@component-controls/test-renderers';

import doc, {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);

  describe('overview', () => {
    const example = overview;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('primary', () => {
    const example = primary;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('accent', () => {
    const example = accent;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('disabled', () => {
    const example = disabled;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('success', () => {
    const example = success;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('error', () => {
    const example = error;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('warning', () => {
    const example = warning;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });
});
",
}
`;

exports[`cli-story create rtr story 1`] = `
Object {
  "VariantButton.test.ts": "import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderExample } from '@component-controls/test-renderers';
import renderer, { act } from 'react-test-renderer';
import { renderErr, componentErr } from '@component-controls/test-renderers';

import doc, {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);

  describe('overview', () => {
    const example = overview;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('primary', () => {
    const example = primary;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('accent', () => {
    const example = accent;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('disabled', () => {
    const example = disabled;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('success', () => {
    const example = success;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('error', () => {
    const example = error;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('warning', () => {
    const example = warning;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const component = renderer.create(rendered);
      if (!component) {
        componentErr();
        return;
      }
      expect(component.toJSON()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });
});
",
}
`;

exports[`cli-story create typescript story 1`] = `
Object {
  "VariantButton.test.ts": "import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderExample } from '@component-controls/test-renderers';
import { render, act } from '@testing-library/react';
import { renderErr } from '@component-controls/test-renderers';

import doc, {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);

  describe('overview', () => {
    const example = overview;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('primary', () => {
    const example = primary;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('accent', () => {
    const example = accent;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('disabled', () => {
    const example = disabled;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('success', () => {
    const example = success;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('error', () => {
    const example = error;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('warning', () => {
    const example = warning;

    let rendered: ReturnType<typeof renderExample> = undefined as any;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    it('snapshot', () => {
      const { asFragment } = render(rendered);
      expect(asFragment()).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM<AxeResults>(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });
});
",
}
`;
