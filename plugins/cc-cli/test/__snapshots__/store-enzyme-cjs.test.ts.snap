// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`enzyme  cjs 1`] = `
"const path = require('path');
const MatchMediaMock = require('jest-matchmedia-mock').default;
const {
  loadConfigurations,
  extractDocuments,
  isMDXDocument,
} = require('@component-controls/config');
const { renderExample } = require('@component-controls/test-renderers');
const { render: reactRender } = require('@component-controls/render/react');
const { mount, configure } = require('enzyme');
const toJson = require('enzyme-to-json').default;
const Adapter = require('@wojtekmaj/enzyme-adapter-react-17');

configure({ adapter: new Adapter() });

describe('component-controls generated', () => {
  let matchMedia;
  beforeAll(() => {
    matchMedia = new MatchMediaMock();
  });
  afterEach(() => {
    matchMedia.clear();
  });
  const configPath = path.resolve(__dirname, '.config');
  const config = loadConfigurations(configPath);
  if (!config.renderFn) {
    config.renderFn = reactRender;
  }
  const documents = extractDocuments({ config, configPath });
  if (documents) {
    documents
      .filter(file => !isMDXDocument(file, config.instrument))
      .forEach(file => {
        // eslint-disable-next-line global-require, import/no-dynamic-require
        const exports = require(file);
        const doc = exports.default;
        const examples = Object.keys(exports)
          .filter(key => key !== 'default')
          .map(key => exports[key]);

        if (examples.length) {
          describe(doc.title, () => {
            examples.forEach(example => {
              it(example.name, async () => {
                const rendered = renderExample({
                  example,
                  doc,
                  config,
                });

                const component = mount(rendered);
                expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
              });
            });
          });
        }
      });
  }
});
"
`;
