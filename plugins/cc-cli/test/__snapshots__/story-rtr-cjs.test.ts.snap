// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rtr  cjs 1`] = `
"const path = require('path');
const { loadConfigurations } = require('@component-controls/config');
const { renderExample } = require('@component-controls/test-renderers');
const renderer = require('react-test-renderer');
const {
  renderErr,
  componentErr,
} = require('@component-controls/test-renderers');
const act = renderer.act;

const doc = require('./fixtures/VariantButton.docs');
const {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} = require('./fixtures/VariantButton.docs');

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '.config');
  const config = loadConfigurations(configPath);

  it('overview', () => {
    const example = overview;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('primary', () => {
    const example = primary;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('accent', () => {
    const example = accent;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('disabled', () => {
    const example = disabled;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('success', () => {
    const example = success;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('error', () => {
    const example = error;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('warning', () => {
    const example = warning;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });
});
"
`;
