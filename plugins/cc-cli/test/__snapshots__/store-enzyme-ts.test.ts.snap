// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`enzyme  ts 1`] = `
"import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import {
  loadConfigurations,
  extractDocuments,
  isMDXDocument,
} from '@component-controls/config';
import { renderExample } from '@component-controls/test-renderers';
import { mount, configure } from 'enzyme';
import toJson from 'enzyme-to-json';
import Adapter from '@wojtekmaj/enzyme-adapter-react-17';

configure({ adapter: new Adapter() });

describe('component-controls generated', () => {
  const configPath = path.resolve(__dirname, '.config');
  const config = loadConfigurations(configPath);
  const documents = extractDocuments({ config, configPath });
  if (documents) {
    documents
      .filter((file: string) => !isMDXDocument(file, config.instrument))
      .forEach((file: string) => {
        // eslint-disable-next-line @typescript-eslint/no-var-requires, global-require, import/no-dynamic-require
        const exports = require(file);
        const doc = exports.default;
        const examples = Object.keys(exports)
          .filter(key => key !== 'default')
          .map(key => exports[key]);

        if (examples.length) {
          describe(doc.title, () => {
            examples.forEach(example => {
              describe(example.name, () => {
                const rendered = renderExample({
                  example,
                  doc,
                  config,
                });

                it('snapshot', () => {
                  const component = mount(rendered);
                  expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
                });
                it('accessibility', async () => {
                  const axeResults = await reactRunDOM<AxeResults>(
                    rendered,
                    run,
                  );
                  expect(axeResults).toHaveNoAxeViolations();
                });
              });
            });
          });
        }
      });
  }
});
"
`;
