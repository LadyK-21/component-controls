// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`cli-document create cjs document 1`] = `
Object {
  "VariantButton.test.js": "const path = require('path');
const { run } = require('axe-core');
const { reactRunDOM } = require('@component-controls/test-renderers');
require('@component-controls/jest-axe-matcher');

const { loadConfigurations } = require('@component-controls/config');
const { renderDocument } = require('@component-controls/test-renderers');
const { render, act } = require('@testing-library/react');
const { renderErr } = require('@component-controls/test-renderers');

const examples = require('./../../../../core/jest-extract/test/fixtures/story/VariantButton.docs');

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);
  let renderedExamples = [];
  act(() => {
    renderedExamples = renderDocument(examples, config);
  });
  if (!renderedExamples) {
    renderErr();
    return;
  }
  renderedExamples.forEach(({ name, rendered }) => {
    describe(name, () => {
      it('snapshot', () => {
        const { asFragment } = render(rendered);
        expect(asFragment()).toMatchSnapshot();
      });
      it('accessibility', async () => {
        const axeResults = await reactRunDOM(rendered, run);
        expect(axeResults).toHaveNoAxeViolations();
      });
    });
  });
});
",
}
`;

exports[`cli-document create enzyme document 1`] = `
Object {
  "VariantButton.test.ts": "import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderDocument } from '@component-controls/test-renderers';
import { mount, configure } from 'enzyme';
import toJson from 'enzyme-to-json';
import Adapter from '@wojtekmaj/enzyme-adapter-react-17';

configure({ adapter: new Adapter() });

import * as examples from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);
  const renderedExamples = renderDocument(examples, config);
  renderedExamples.forEach(({ name, rendered }) => {
    describe(name, () => {
      it('snapshot', () => {
        const component = mount(rendered);
        expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
      });
      it('accessibility', async () => {
        const axeResults = await reactRunDOM<AxeResults>(rendered, run);
        expect(axeResults).toHaveNoAxeViolations();
      });
    });
  });
});
",
}
`;

exports[`cli-document create esm document 1`] = `
Object {
  "VariantButton.test.js": "import * as path from 'path';
import { run } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderDocument } from '@component-controls/test-renderers';
import { render, act } from '@testing-library/react';
import { renderErr } from '@component-controls/test-renderers';

import * as examples from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);
  let renderedExamples = [];
  act(() => {
    renderedExamples = renderDocument(examples, config);
  });
  if (!renderedExamples) {
    renderErr();
    return;
  }
  renderedExamples.forEach(({ name, rendered }) => {
    describe(name, () => {
      it('snapshot', () => {
        const { asFragment } = render(rendered);
        expect(asFragment()).toMatchSnapshot();
      });
      it('accessibility', async () => {
        const axeResults = await reactRunDOM(rendered, run);
        expect(axeResults).toHaveNoAxeViolations();
      });
    });
  });
});
",
}
`;

exports[`cli-document create rtr document 1`] = `
Object {
  "VariantButton.test.ts": "import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderDocument } from '@component-controls/test-renderers';
import renderer, { act } from 'react-test-renderer';
import { renderErr, componentErr } from '@component-controls/test-renderers';

import * as examples from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);
  let renderedExamples: ReturnType<typeof renderDocument> = [];
  act(() => {
    renderedExamples = renderDocument(examples, config);
  });
  if (!renderedExamples.length) {
    renderErr();
    return;
  }
  renderedExamples.forEach(({ name, rendered }) => {
    describe(name, () => {
      it('snapshot', () => {
        const component = renderer.create(rendered);
        if (!component) {
          componentErr();
          return;
        }
        expect(component.toJSON()).toMatchSnapshot();
      });
      it('accessibility', async () => {
        const axeResults = await reactRunDOM<AxeResults>(rendered, run);
        expect(axeResults).toHaveNoAxeViolations();
      });
    });
  });
});
",
}
`;

exports[`cli-document create typescript document 1`] = `
Object {
  "VariantButton.test.ts": "import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadConfigurations } from '@component-controls/config';
import { renderDocument } from '@component-controls/test-renderers';
import { render, act } from '@testing-library/react';
import { renderErr } from '@component-controls/test-renderers';

import * as examples from './../../../../core/jest-extract/test/fixtures/story/VariantButton.docs';

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '../.config');
  const config = loadConfigurations(configPath);
  let renderedExamples: ReturnType<typeof renderDocument> = [];
  act(() => {
    renderedExamples = renderDocument(examples, config);
  });
  if (!renderedExamples) {
    renderErr();
    return;
  }
  renderedExamples.forEach(({ name, rendered }) => {
    describe(name, () => {
      it('snapshot', () => {
        const { asFragment } = render(rendered);
        expect(asFragment()).toMatchSnapshot();
      });
      it('accessibility', async () => {
        const axeResults = await reactRunDOM<AxeResults>(rendered, run);
        expect(axeResults).toHaveNoAxeViolations();
      });
    });
  });
});
",
}
`;
