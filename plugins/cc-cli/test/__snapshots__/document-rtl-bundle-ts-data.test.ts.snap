// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rtl bundle ts 1`] = `
"import * as path from 'path';
import { run, AxeResults } from 'axe-core';
import { reactRunDOM } from '@component-controls/test-renderers';
import '@component-controls/jest-axe-matcher';
import { loadStore } from '@component-controls/store';
import { render, act } from '@testing-library/react';
import { renderErr } from '@component-controls/test-renderers';

import data from './VariantButton.data';

describe('VariantButton', () => {
  const store = loadStore(
    require(path.resolve(__dirname, './bundle/component-controls.js')),
  );

  const doc = store.docs['VariantButton'];
  if (doc.stories && doc.stories.length) {
    const stories = doc.stories;
    describe(doc.title, () => {
      stories.forEach(storyId => {
        const story = store.stories[storyId];
        describe(story.name, () => {
          const runTests = (
            values?: Parameters<typeof doc['renderFn']>['values'],
          ) => {
            let rendered: ReturnType<typeof doc['renderFn']>;
            act(() => {
              rendered = doc.renderFn({ story, doc, values });
            });
            if (!rendered) {
              renderErr();
              return;
            }
            it('snapshot', () => {
              const { asFragment } = render(rendered);
              expect(asFragment()).toMatchSnapshot();
            });
            it('accessibility', async () => {
              const axeResults = await reactRunDOM<AxeResults>(rendered, run);
              expect(axeResults).toHaveNoAxeViolations();
            });
          };
          if (data[story.id]) {
            Object.keys(data[story.id]).forEach(dataId => {
              describe(dataId, () => {
                const values = data[story.id][dataId];
                runTests(values);
              });
            });
          } else {
            runTests();
          }
        });
      });
    });
  }
});
"
`;
