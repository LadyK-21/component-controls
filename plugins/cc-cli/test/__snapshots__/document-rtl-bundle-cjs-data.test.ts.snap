// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rtl bundle cjs 1`] = `
"const path = require('path');
const { run } = require('axe-core');
const { reactRunDOM } = require('@component-controls/test-renderers');
require('@component-controls/jest-axe-matcher');

const { loadStore } = require('@component-controls/store');
const { render, act } = require('@testing-library/react');
const { renderErr } = require('@component-controls/test-renderers');

const data = require('./VariantButton.data');

describe('VariantButton', () => {
  const store = loadStore(
    require(path.resolve(__dirname, './bundle/component-controls.js')),
  );
  const renderFn = store.config.renderFn;
  const doc = store.docs['VariantButton'];
  if (doc.stories && doc.stories.length) {
    const stories = doc.stories;
    describe(doc.title, () => {
      stories.forEach(storyId => {
        const story = store.stories[storyId];
        describe(story.name, () => {
          const runTests = values => {
            let rendered;
            act(() => {
              rendered = renderFn({ story, doc, values });
            });
            if (!rendered) {
              renderErr();
              return;
            }
            it('snapshot', () => {
              const { asFragment } = render(rendered);
              expect(asFragment()).toMatchSnapshot();
            });
            it('accessibility', async () => {
              const axeResults = await reactRunDOM(rendered, run);
              expect(axeResults).toHaveNoAxeViolations();
            });
          };
          if (data[story.id]) {
            Object.keys(data[story.id]).forEach(dataId => {
              describe(dataId, () => {
                const values = data[story.id][dataId];
                runTests(values);
              });
            });
          } else {
            runTests();
          }
        });
      });
    });
  }
});
"
`;
