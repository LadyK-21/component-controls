// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rtl  cjs 1`] = `
"const path = require('path');
const {
  loadConfigurations,
  extractDocuments,
  isMDXDocument,
} = require('@component-controls/config');
const { renderExample } = require('@component-controls/test-renderers');
const { render: reactRender } = require('@component-controls/render/react');
const { render, act } = require('@testing-library/react');
const { renderErr } = require('@component-controls/test-renderers');

describe('component-controls generated', () => {
  const configPath = path.resolve(__dirname, '.config');
  const config = loadConfigurations(configPath);
  if (!config.renderFn) {
    config.renderFn = reactRender;
  }
  const documents = extractDocuments({ config, configPath });
  if (documents) {
    documents
      .filter(file => !isMDXDocument(file, config.instrument))
      .forEach(file => {
        // eslint-disable-next-line global-require, import/no-dynamic-require
        const exports = require(file);
        const doc = exports.default;
        const examples = Object.keys(exports)
          .filter(key => key !== 'default')
          .map(key => exports[key]);

        if (examples.length) {
          describe(doc.title, () => {
            examples.forEach(example => {
              it(example.name, async () => {
                let rendered;
                act(() => {
                  rendered = renderExample({
                    example,
                    doc,
                    config,
                  });
                });
                if (!rendered) {
                  renderErr();
                  return;
                }
                const { asFragment } = render(rendered);
                expect(asFragment()).toMatchSnapshot();
              });
            });
          });
        }
      });
  }
});
"
`;
