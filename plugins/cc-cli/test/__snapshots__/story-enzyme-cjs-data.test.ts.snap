// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`enzyme  cjs 1`] = `
"const path = require('path');
const { run } = require('axe-core');
const { reactRunDOM } = require('@component-controls/test-renderers');
require('@component-controls/jest-axe-matcher');

const { loadConfigurations } = require('@component-controls/config');
const { renderExample } = require('@component-controls/test-renderers');
const { mount, configure } = require('enzyme');
const toJson = require('enzyme-to-json').default;
const Adapter = require('@wojtekmaj/enzyme-adapter-react-17');

configure({ adapter: new Adapter() });

const doc = require('./fixtures/VariantButton.docs');
const {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} = require('./fixtures/VariantButton.docs');

const data = require('./VariantButton.data');

describe('VariantButton', () => {
  const configPath = path.resolve(__dirname, '.config');
  const config = loadConfigurations(configPath);

  describe('overview', () => {
    Object.keys(data['overview']).forEach(dataId => {
      const values = data['overview'][dataId];
      describe(dataId, () => {
        const example = overview;

        const rendered = renderExample({
          example,
          doc,
          config,
          values,
        });

        it('snapshot', () => {
          const component = mount(rendered);
          expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
        });
        it('accessibility', async () => {
          const axeResults = await reactRunDOM(rendered, run);
          expect(axeResults).toHaveNoAxeViolations();
        });
      });
    });
  });

  describe('primary', () => {
    const example = primary;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('accent', () => {
    const example = accent;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('disabled', () => {
    const example = disabled;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('success', () => {
    const example = success;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('error', () => {
    const example = error;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });

  describe('warning', () => {
    const example = warning;

    const rendered = renderExample({
      example,
      doc,
      config,
    });

    it('snapshot', () => {
      const component = mount(rendered);
      expect(toJson(component, { mode: 'deep' })).toMatchSnapshot();
    });
    it('accessibility', async () => {
      const axeResults = await reactRunDOM(rendered, run);
      expect(axeResults).toHaveNoAxeViolations();
    });
  });
});
"
`;
