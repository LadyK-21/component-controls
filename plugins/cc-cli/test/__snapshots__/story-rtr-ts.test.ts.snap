// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rtr  ts 1`] = `
"import * as path from 'path';
import MatchMediaMock from 'jest-matchmedia-mock';
import { loadConfigurations } from '@component-controls/config';
import { renderExample } from '@component-controls/test-renderers';
import { render as reactRender } from '@component-controls/render/react';
import renderer, { act } from 'react-test-renderer';

const renderErr = (): void => {
  throw new Error('Could not render the story');
};
const componentErr = (): void => {
  throw new Error('Error rendering component with react-test-renderer');
};

import doc, {
  overview,
  primary,
  accent,
  disabled,
  success,
  error,
  warning,
} from './fixtures/VariantButton.docs';

describe('VariantButton', () => {
  let matchMedia: MatchMediaMock;
  beforeAll(() => {
    matchMedia = new MatchMediaMock();
  });
  afterEach(() => {
    matchMedia.clear();
  });
  const configPath = path.resolve(__dirname, '.config');
  const config = loadConfigurations(configPath);
  if (!config.renderFn) {
    config.renderFn = reactRender;
  }

  test('overview', () => {
    const example = overview;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('primary', () => {
    const example = primary;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('accent', () => {
    const example = accent;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('disabled', () => {
    const example = disabled;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('success', () => {
    const example = success;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('error', () => {
    const example = error;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });

  test('warning', () => {
    const example = warning;

    let rendered;
    act(() => {
      rendered = renderExample({
        example,
        doc,
        config,
      });
    });
    if (!rendered) {
      renderErr();
      return;
    }
    const component = renderer.create(rendered);
    if (!component) {
      componentErr();
      return;
    }
    expect(component.toJSON()).toMatchSnapshot();
  });
});
"
`;
